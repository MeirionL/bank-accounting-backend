// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: accounts.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (
    id, 
    created_at, 
    updated_at,  
    account_name, 
    balance,
    account_number, 
    sort_code, 
    user_id
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, created_at, updated_at, account_name, balance, account_number, sort_code, user_id
`

type CreateAccountParams struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	AccountName   string
	Balance       float32
	AccountNumber string
	SortCode      string
	UserID        int32
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.AccountName,
		arg.Balance,
		arg.AccountNumber,
		arg.SortCode,
		arg.UserID,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccountName,
		&i.Balance,
		&i.AccountNumber,
		&i.SortCode,
		&i.UserID,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM accounts WHERE id = $1 AND user_id = $2
`

type DeleteAccountParams struct {
	ID     uuid.UUID
	UserID int32
}

func (q *Queries) DeleteAccount(ctx context.Context, arg DeleteAccountParams) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, arg.ID, arg.UserID)
	return err
}

const getAccountByDetails = `-- name: GetAccountByDetails :one
SELECT id, created_at, updated_at, account_name, balance, account_number, sort_code, user_id FROM accounts WHERE account_number = $1 AND sort_code = $2 AND user_id = $3
`

type GetAccountByDetailsParams struct {
	AccountNumber string
	SortCode      string
	UserID        int32
}

func (q *Queries) GetAccountByDetails(ctx context.Context, arg GetAccountByDetailsParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByDetails, arg.AccountNumber, arg.SortCode, arg.UserID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccountName,
		&i.Balance,
		&i.AccountNumber,
		&i.SortCode,
		&i.UserID,
	)
	return i, err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, created_at, updated_at, account_name, balance, account_number, sort_code, user_id FROM accounts WHERE id = $1 AND user_id = $2
`

type GetAccountByIDParams struct {
	ID     uuid.UUID
	UserID int32
}

func (q *Queries) GetAccountByID(ctx context.Context, arg GetAccountByIDParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccountByID, arg.ID, arg.UserID)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccountName,
		&i.Balance,
		&i.AccountNumber,
		&i.SortCode,
		&i.UserID,
	)
	return i, err
}

const getAccounts = `-- name: GetAccounts :many
SELECT id, created_at, updated_at, account_name, balance, account_number, sort_code, user_id FROM accounts WHERE user_id = $1
`

func (q *Queries) GetAccounts(ctx context.Context, userID int32) ([]Account, error) {
	rows, err := q.db.QueryContext(ctx, getAccounts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AccountName,
			&i.Balance,
			&i.AccountNumber,
			&i.SortCode,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountsBalances = `-- name: GetAccountsBalances :many
SELECT account_name, balance FROM accounts WHERE user_id = $1
`

type GetAccountsBalancesRow struct {
	AccountName string
	Balance     float32
}

func (q *Queries) GetAccountsBalances(ctx context.Context, userID int32) ([]GetAccountsBalancesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAccountsBalances, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAccountsBalancesRow
	for rows.Next() {
		var i GetAccountsBalancesRow
		if err := rows.Scan(&i.AccountName, &i.Balance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserIDByAccountID = `-- name: GetUserIDByAccountID :one
SELECT user_id FROM accounts WHERE id = $1
`

func (q *Queries) GetUserIDByAccountID(ctx context.Context, id uuid.UUID) (int32, error) {
	row := q.db.QueryRowContext(ctx, getUserIDByAccountID, id)
	var user_id int32
	err := row.Scan(&user_id)
	return user_id, err
}

const updateAccount = `-- name: UpdateAccount :one
UPDATE accounts
SET updated_at = $3, account_name = $4, balance = $5
WHERE id = $1 AND user_id = $2
RETURNING id, created_at, updated_at, account_name, balance, account_number, sort_code, user_id
`

type UpdateAccountParams struct {
	ID          uuid.UUID
	UserID      int32
	UpdatedAt   time.Time
	AccountName string
	Balance     float32
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount,
		arg.ID,
		arg.UserID,
		arg.UpdatedAt,
		arg.AccountName,
		arg.Balance,
	)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AccountName,
		&i.Balance,
		&i.AccountNumber,
		&i.SortCode,
		&i.UserID,
	)
	return i, err
}
