// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: tokens.sql

package database

import (
	"context"
	"time"
)

const createRevokedToken = `-- name: CreateRevokedToken :exec
INSERT INTO revoked_tokens (token, revoked_at, user_id)
VALUES ($1, $2, $3)
RETURNING token, revoked_at, user_id
`

type CreateRevokedTokenParams struct {
	Token     string
	RevokedAt time.Time
	UserID    int32
}

func (q *Queries) CreateRevokedToken(ctx context.Context, arg CreateRevokedTokenParams) error {
	_, err := q.db.ExecContext(ctx, createRevokedToken, arg.Token, arg.RevokedAt, arg.UserID)
	return err
}

const getRevokedTokens = `-- name: GetRevokedTokens :many
SELECT token FROM revoked_tokens WHERE user_id = $1
`

func (q *Queries) GetRevokedTokens(ctx context.Context, userID int32) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getRevokedTokens, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var token string
		if err := rows.Scan(&token); err != nil {
			return nil, err
		}
		items = append(items, token)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
