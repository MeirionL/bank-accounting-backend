// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: transactions.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO transactions (
    id, 
    created_at, 
    updated_at, 
    transaction_time, 
    type, 
    amount, 
    pre_balance, 
    post_balance, 
    new_account, 
    name, 
    account_number, 
    sort_code, 
    account_id
)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
RETURNING id, created_at, updated_at, transaction_time, type, amount, pre_balance, post_balance, new_account, name, account_number, sort_code, account_id
`

type CreateTransactionParams struct {
	ID              uuid.UUID
	CreatedAt       time.Time
	UpdatedAt       time.Time
	TransactionTime time.Time
	Type            string
	Amount          float32
	PreBalance      float32
	PostBalance     float32
	NewAccount      bool
	Name            string
	AccountNumber   string
	SortCode        string
	AccountID       uuid.UUID
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.TransactionTime,
		arg.Type,
		arg.Amount,
		arg.PreBalance,
		arg.PostBalance,
		arg.NewAccount,
		arg.Name,
		arg.AccountNumber,
		arg.SortCode,
		arg.AccountID,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TransactionTime,
		&i.Type,
		&i.Amount,
		&i.PreBalance,
		&i.PostBalance,
		&i.NewAccount,
		&i.Name,
		&i.AccountNumber,
		&i.SortCode,
		&i.AccountID,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM transactions WHERE account_id = $1 AND id = $2
`

type DeleteTransactionParams struct {
	AccountID uuid.UUID
	ID        uuid.UUID
}

func (q *Queries) DeleteTransaction(ctx context.Context, arg DeleteTransactionParams) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, arg.AccountID, arg.ID)
	return err
}

const getTransactionByID = `-- name: GetTransactionByID :one
SELECT id, created_at, updated_at, transaction_time, type, amount, pre_balance, post_balance, new_account, name, account_number, sort_code, account_id FROM transactions 
WHERE account_id = $1 AND id = $2
`

type GetTransactionByIDParams struct {
	AccountID uuid.UUID
	ID        uuid.UUID
}

func (q *Queries) GetTransactionByID(ctx context.Context, arg GetTransactionByIDParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, getTransactionByID, arg.AccountID, arg.ID)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.TransactionTime,
		&i.Type,
		&i.Amount,
		&i.PreBalance,
		&i.PostBalance,
		&i.NewAccount,
		&i.Name,
		&i.AccountNumber,
		&i.SortCode,
		&i.AccountID,
	)
	return i, err
}

const getTransactions = `-- name: GetTransactions :many
SELECT id, created_at, updated_at, transaction_time, type, amount, pre_balance, post_balance, new_account, name, account_number, sort_code, account_id FROM transactions
WHERE account_id = $1
ORDER BY traNsaction_time DESC
`

func (q *Queries) GetTransactions(ctx context.Context, accountID uuid.UUID) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactions, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TransactionTime,
			&i.Type,
			&i.Amount,
			&i.PreBalance,
			&i.PostBalance,
			&i.NewAccount,
			&i.Name,
			&i.AccountNumber,
			&i.SortCode,
			&i.AccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByAccount = `-- name: GetTransactionsByAccount :many
SELECT id, created_at, updated_at, transaction_time, type, amount, pre_balance, post_balance, new_account, name, account_number, sort_code, account_id FROM transactions 
WHERE account_id = $1 AND account_number = $2 AND sort_code = $3
`

type GetTransactionsByAccountParams struct {
	AccountID     uuid.UUID
	AccountNumber string
	SortCode      string
}

func (q *Queries) GetTransactionsByAccount(ctx context.Context, arg GetTransactionsByAccountParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByAccount, arg.AccountID, arg.AccountNumber, arg.SortCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TransactionTime,
			&i.Type,
			&i.Amount,
			&i.PreBalance,
			&i.PostBalance,
			&i.NewAccount,
			&i.Name,
			&i.AccountNumber,
			&i.SortCode,
			&i.AccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByOthersAccount = `-- name: GetTransactionsByOthersAccount :many
SELECT id, created_at, updated_at, transaction_time, type, amount, pre_balance, post_balance, new_account, name, account_number, sort_code, account_id FROM transactions
WHERE account_id = $1 AND account_number = $2 AND sort_code = $3
`

type GetTransactionsByOthersAccountParams struct {
	AccountID     uuid.UUID
	AccountNumber string
	SortCode      string
}

func (q *Queries) GetTransactionsByOthersAccount(ctx context.Context, arg GetTransactionsByOthersAccountParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByOthersAccount, arg.AccountID, arg.AccountNumber, arg.SortCode)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TransactionTime,
			&i.Type,
			&i.Amount,
			&i.PreBalance,
			&i.PostBalance,
			&i.NewAccount,
			&i.Name,
			&i.AccountNumber,
			&i.SortCode,
			&i.AccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsByType = `-- name: GetTransactionsByType :many
SELECT id, created_at, updated_at, transaction_time, type, amount, pre_balance, post_balance, new_account, name, account_number, sort_code, account_id FROM transactions
WHERE account_id = $1 AND type = $2
`

type GetTransactionsByTypeParams struct {
	AccountID uuid.UUID
	Type      string
}

func (q *Queries) GetTransactionsByType(ctx context.Context, arg GetTransactionsByTypeParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsByType, arg.AccountID, arg.Type)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TransactionTime,
			&i.Type,
			&i.Amount,
			&i.PreBalance,
			&i.PostBalance,
			&i.NewAccount,
			&i.Name,
			&i.AccountNumber,
			&i.SortCode,
			&i.AccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionsWithLimit = `-- name: GetTransactionsWithLimit :many
SELECT id, created_at, updated_at, transaction_time, type, amount, pre_balance, post_balance, new_account, name, account_number, sort_code, account_id FROM transactions
WHERE account_id = $1
ORDER BY transaction_time DESC
LIMIT $2
`

type GetTransactionsWithLimitParams struct {
	AccountID uuid.UUID
	Limit     int32
}

func (q *Queries) GetTransactionsWithLimit(ctx context.Context, arg GetTransactionsWithLimitParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionsWithLimit, arg.AccountID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.TransactionTime,
			&i.Type,
			&i.Amount,
			&i.PreBalance,
			&i.PostBalance,
			&i.NewAccount,
			&i.Name,
			&i.AccountNumber,
			&i.SortCode,
			&i.AccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
